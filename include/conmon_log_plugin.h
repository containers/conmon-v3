/*
 * conmon-v3 Logging Plugin C ABI
 * This file is auto-generated by cbindgen. Do not edit by hand.
 */


#ifndef CONMON_LOG_PLUGIN_H
#define CONMON_LOG_PLUGIN_H

#pragma once

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#define CONMON_LOG_PLUGIN_ABI_VERSION 1

#define CONMON_LOG_OK 0

#define CONMON_LOG_ERR -1

typedef struct conmon_kv_t {
    const char *key;
    const char *value;
} conmon_kv_t;

typedef struct conmon_plugin {
    void _0;
} conmon_plugin;

typedef struct conmon_log_record_t {
    uint32_t stream;
    const uint8_t *data;
    size_t len;
    uint32_t flags;
} conmon_log_record_t;

typedef struct conmon_log_plugin_v1 {
    uint32_t abi_version;
    uint32_t struct_size;
    uint32_t flags;
    /**
     * Initializes the log plugin.
     * `args` - key, value pairs to configure the plugin.
     * `n_args` - number of `args`.
     * `out_handle` - handle holding the state of the plugin.
     * Returns the CONMON_LOG_* status code.
     */
    int32_t (*init)(const struct conmon_kv_t *args, size_t n_args, struct conmon_plugin **out_handle);
    /**
     * Writes the data to log.
     * `handle` - handle holding the state of the plugin.
     * `rec` - lod record to write to logs.
     * Returns the CONMON_LOG_* status code.
     */
    int32_t (*write)(struct conmon_plugin *handle, const struct conmon_log_record_t *rec);
    /**
     * Closes and frees the resources.
     * `handle` - handle holding the state of the plugin.
     */
    void (*close)(struct conmon_plugin *handle);
} conmon_log_plugin_v1;

extern const struct conmon_log_plugin_v1 *conmon_log_plugin_v1_get(void);

#endif  /* CONMON_LOG_PLUGIN_H */
